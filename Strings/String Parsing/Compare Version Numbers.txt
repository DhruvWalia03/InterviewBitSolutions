/*
This Solution is By Dhruv Walia

Compare two version numbers version1 and version2.

If version1 > version2 return 1,
If version1 < version2 return -1,
otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 1.13 < 1.13.4

Solution is below: 
*/

int Solution::compareVersion(string A, string B) 
{
    A += "."; B += ".";
    int i,n=A.length(),m=B.length(),x;
    vector<unsigned long long> a,b;
    x = 0; 
    for(i=0;i<n;i++)
    {
        if(A[i] == '.')
            a.push_back(x),x = 0;
        else x = x*10+(A[i]-'0');
    }
    for(i=0;i<m;i++)
    {
        if(B[i] == '.')
            b.push_back(x),x = 0;
        else x = x*10+(B[i]-'0');
    }
    n = a.size(); m = b.size();
    for(i=0;i<min(n,m);i++)
    {
        if(a[i] < b[i])
            return -1;
        else if(a[i] > b[i])
            return 1;
    }
    if(i == n && n==m)
        return 0;
    if(i == n)
    {
        for(;i<m;i++)
        {
            if(b[i] != 0)
                break;
        }
        if(i == m)
            return 0;
        return -1;
    }
    for(;i<n;i++)
    {
        if(a[i] != 0)
            break;
    }
    if(i == n)
        return 0;
    return 1;
}