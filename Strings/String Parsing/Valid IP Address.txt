/*
This Solution is By Dhruv Walia

Asked in:  
Amazon

Given a string containing only digits, restore it by returning all possible valid IP address combinations.

A valid IP address must be in the form of A.B.C.D, where A,B,C and D are numbers from 0-255. The numbers cannot be 0 prefixed unless they are 0.

Example:

Given “25525511135”,

return [“255.255.11.135”, “255.255.111.35”]. (Make sure the returned strings are sorted in order)



Solution is below: 
*/

vector<string> ans;
bool valid_ip(string A)
{
    int x=0,i=0,flag=0;
    while(A[i] != '.')
    {
        if(x==0 && A[i] == '0')
        {
            if(flag != 0) 
                return false;
            flag = 1;
        }
        x = x*10 + (A[i]-'0');
        i++;
    }
    if(flag && x != 0) 
        return false;
    if(x<0 || x>255 || (x == 0 && flag == 0))
        return false;
    x=0;i++;flag=0;
    while(A[i] != '.')
    {
        if(x==0 && A[i] == '0')
        {
            if(flag != 0) 
                return false;
            flag = 1;
        }
        x = x*10 + (A[i]-'0');
        i++;
    }
    if(flag && x != 0) 
        return false;
    if(x<0 || x>255 || (x == 0 && flag == 0))
        return false;
    x=0;i++;flag=0;
    while(A[i] != '.')
    {
        if(x==0 && A[i] == '0')
        {
            if(flag != 0)
                return false;
            flag = 1;
        }
        x = x*10 + (A[i]-'0');
        i++;
    }
    if(flag && x != 0) 
        return false;
    if(x<0 || x>255 || (x == 0 && flag == 0))
        return false;
    x=0;i++;flag=0;
    while(i != A.length())
    {
        if(x==0 && A[i] == '0')
        {
            if(flag != 0) 
                return false;
            flag = 1;
        }
        x = x*10 + (A[i]-'0');
        i++;
    }
    if(flag && x != 0) 
        return false;
    if(x<0 || x>255 || (x == 0 && flag == 0))
        return false;
    return true;
}

void solve(string A,int cnt,int st)
{
    if(cnt == 3)
    {
        if(valid_ip(A))
            ans.push_back(A);
        return;
    }
    for(int i=st;i<A.size();i++)
    {
        A.insert(A.begin()+i,'.');
        solve(A,cnt+1,i+1);
        A.erase(A.begin()+i);
    }
}

vector<string> Solution::restoreIpAddresses(string A)
{
    ans.clear();
    solve(A,0,0);
    sort(ans.begin(),ans.end());
    return ans;
}
