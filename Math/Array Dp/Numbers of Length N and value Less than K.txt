/*
This Solution is By Dhruv Walia

Given a set of digits (A) in sorted order, find how many numbers of length B are possible whose value is less than number C.

 NOTE: All numbers can only have digits from the given set. 
Examples:

	Input:
	  0 1 5  
	  1  
	  2  
	Output:  
	  2 (0 and 1 are possible)  

	Input:
	  0 1 2 5  
	  2  
	  21  
	Output:
	  5 (10, 11, 12, 15, 20 are possible)

Solution is below: 
*/

int dp(int i,string s,int n,int B,vector<int> v)
{
    if(i == B)
        return 0;
    int x = 0, m = s[i]-'0',j;
    for(j=0;j<n;j++)
    {
        if(i == 0 && v[j] == 0)
            continue;
        if(v[j] < m)
            x += pow(n,B-i-1);
        else if(v[j] == m)
            x += dp(i+1,s,n,B,v);
        else break;
    }
    return x;
}
 
int Solution::solve(vector<int> &A, int B, int C) {
 
    string s = to_string(C);
    int i,j,n=A.size();
    if(n == 0)
        return 0;
    if(B > s.length())
        return 0;
    if(B < s.length())
    {
        if(B == 1)
            return n;
        if(A[0] == 0)
            return (n-1)*pow(n,B-1);
        return pow(n,B);
    }
    if(B == 1)
        return lower_bound(A.begin(),A.end(),s[i]-'0')-A.begin();
    return dp(0,s,n,B,A);
}