/*
This Solution is By Dhruv Walia

There are A cities numbered from 1 to A. You have already visited M cities, the indices of which are given in an array B of M integers.

If a city with index i is visited, you can visit either the city with index i-1 (i >= 2) or the city with index i+1 (i < A) if they are not already visited.
Eg: if N = 5 and array M consists of [3, 4], then in the first level of moves, you can either visit 2 or 5.

You keep visiting cities in this fashion until all the cities are not visited.
Find the number of ways in which you can visit all the cities modulo 10^9+7.

Input:
    A = 5
    B = [2, 5]
Output:
    6
   
Explanation:
    All possible ways to visit remaining cities are :
    1. 1 -> 3 -> 4
    2. 1 -> 4 -> 3
    3. 3 -> 1 -> 4
    4. 3 -> 4 -> 1
    5. 4 -> 1 -> 3
    6. 4 -> 3 -> 1

Solution is below: 
*/

long long mod = 1e9+7;
int fact[100005];
long long expo(long long x,long long y)
{
    long long res = 1;
    while(y>0)
    {
        if(y%2==1)
            res = (res%mod * x%mod)%mod;
        x = (x%mod * x%mod)%mod;
        y /= 2;
    }
    return res%mod;
}
 
void factorial()
{
    fact[0] = 1;
    for(int i=1;i<100005;i++)
        fact[i] = (fact[i-1]%mod * i%mod)%mod;
}
 
int Solution::solve(int A, vector<int> &B) {
    sort(B.begin(),B.end());
    vector<int> v;
    factorial();
    v.push_back(B[0]-1);
    for(int i=1;i<B.size();i++)
        v.push_back(B[i]-B[i-1]-1);
    v.push_back(A-B[B.size()-1]);
    long long n = v.size(),ans=1,x=A-B.size(),p=1;
    for(int i=0;i<n;i++)
    {
        if(i != 0 && i != n-1)
            ans = (ans%mod * expo(2,v[i]-1)%mod)%mod;
        p = (p%mod * fact[v[i]]%mod)%mod;
    }
    ans = (ans%mod * fact[x]%mod)%mod;
    ans = (ans%mod * expo(p,mod-2))%mod;
    return ans;
}