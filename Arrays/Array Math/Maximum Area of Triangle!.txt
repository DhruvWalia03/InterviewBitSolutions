/*
This Solution is By Dhruv Walia

Asked in:  
Directi

Problem Description

Given a character matrix of size N x M in the form of a string array A of size N where A[i] denotes ith row.

Each character in the matrix consists any one of the following three characters {'r', 'g', 'b'} where 'r' denotes red color similarly 'g' denotes green color and 'b' denotes blue color.

You have to find the area of the largest triangle that has one side parallel to y-axis i.e vertical and the color of all three vertices are different.

NOTE:

If the area comes out to be a real number than return the ceil of that number.


Solution is below:
*/

int Solution::solve(vector<string> &A) {
    
    int i,j,n = A.size(),m = A[0].length();
    int col[m+1][3][2];
    memset(col,-1,sizeof(col));
    for(i=0;i<m;i++)
    {
        int x=0,y=0,z=0;
        for(j=0;j<n;j++)
        {
            if(x==0 && A[j][i] == 'r')
                col[i][0][0] = j,col[i][0][1] = j,x++;
            else if(A[j][i] == 'r')
                col[i][0][1] = j;
            if(y==0 && A[j][i] == 'g')
                col[i][1][0] = j,col[i][1][1] = j,y++;
            else if(A[j][i] == 'g')
                col[i][1][1] = j;
            if(z==0 && A[j][i] == 'b')
                col[i][2][0] = j,col[i][2][1] = j,z++;
            else if(A[j][i] == 'b')
                col[i][2][1] = j;
        }
    }
    int lr=-1,lg=-1,lb=-1,rr=-1,rg=-1,rb=-1;
    for(i=0;i<m;i++)
    {
        if(col[i][0][0] != -1 && lr == -1) 
            lr = i,rr = i;
        else if(col[i][0][0] != -1) 
            rr = i;
        if(col[i][1][0] != -1 && lg == -1) 
            lg = i,rg = i;
        else if(col[i][1][0] != -1) 
            rg = i;
        if(col[i][2][0] != -1 && lb == -1) 
            lb = i,rb = i;
        else if(col[i][2][0] != -1) 
            rb = i;
    }
    if(lr==-1 || lg==-1 || lb==-1)
        return 0;
        
    int maxarea = 0;
    for(i=0;i<m;i++)
    {
        if(col[i][0][0] != -1 && col[i][1][1] != -1)
        {
            maxarea = max(maxarea, (max(abs(col[i][0][0]-col[i][1][1])+1,
                                       abs(col[i][1][0]-col[i][0][1])+1)
                                       *max(abs(i-lb)+1,abs(rb-i)+1)+1)/2);
        }
        if(col[i][0][0] != -1 && col[i][2][1] != -1)
        {
            maxarea = max(maxarea, (max(abs(col[i][0][0]-col[i][2][1])+1,
                                       abs(col[i][2][0]-col[i][0][1])+1)
                                       *max(abs(i-lg)+1,abs(rg-i)+1)+1)/2);
        }
        if(col[i][1][0]!=-1 && col[i][2][1]!=-1)
        {
            maxarea = max(maxarea, (max(abs(col[i][1][0]-col[i][2][1])+1,
                                       abs(col[i][2][0]-col[i][1][1])+1)
                                       *max(abs(i-lr)+1,abs(rr-i)+1)+1)/2);
        }
    }
    return maxarea;
}
