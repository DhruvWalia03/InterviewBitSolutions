/*
This Solution is By Dhruv Walia

Asked in:  
Google

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Given intervals [1,3],[6,9] insert and merge [2,5] would result in [1,5],[6,9].


Solution is below:
*/

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
static bool comp (Interval a,Interval b)
{
    return a.start<b.start;
}
 
vector<Interval> merge(vector<Interval> &A) {
        
        sort(A.begin(),A.end(),comp);
        int i,j,k,x,y;
        vector<Interval> ans;
        Interval v;
        v.start = A[0].start;
        y = A[0].end;
        for(i=1;i<A.size();i++)
        {
            if(A[i].start <= y)
                y=max(A[i].end,y);
            else 
            {
                v.end = y;
                ans.push_back(v);
                v.start = A[i].start;
                y = A[i].end;
            }
        }
        v.end = y;
        ans.push_back(v);
        return ans;
}
 
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    
    intervals.push_back(newInterval);
    return merge(intervals);
    
}