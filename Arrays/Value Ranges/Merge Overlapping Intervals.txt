/*
This Solution is By Dhruv Walia

Asked in:  
Google
Amazon
Given a collection of intervals, merge all overlapping intervals.

For example:

Given [1,3],[2,6],[8,10],[15,18],

return [1,6],[8,10],[15,18].

Make sure the returned intervals are sorted.

Solution is below:
*/

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

static bool comp (Interval a,Interval b)
{
    return a.start<b.start;
}

vector<Interval> Solution::merge(vector<Interval> &A) {
        
        sort(A.begin(),A.end(),comp);
        int i,j,k,x,y;
        vector<Interval> ans;
        Interval v;
        v.start = A[0].start;
        y = A[0].end;
        for(i=1;i<A.size();i++)
        {
            if(A[i].start <= y)
                y=max(A[i].end,y);
            else 
            {
                v.end = y;
                ans.push_back(v);
                v.start = A[i].start;
                y = A[i].end;
            }
        }
        v.end = y;
        ans.push_back(v);
        return ans;
}
