/*
This Solution is By Dhruv Walia

Asked in:  
Google
Microsoft

Given a sorted array of integers A(0 based index) of size N, find the starting and ending position of a given integar B in array A.

Your algorithmâ€™s runtime complexity must be in the order of O(log n).

Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].

Input 1:
    A = [5, 7, 7, 8, 8, 10]
    B = 8
Output 1:
    [3, 4]
Explanation 1:
    First occurence of 8 in A is at index 3
    Second occurence of 8 in A is at index 4
    ans = [3, 4]

Solution is below: 
*/

vector<int> Solution::searchRange(const vector<int> &A, int B) {

    vector <int> ans;
    ans.push_back(-1);
    ans.push_back(-1);
    int i,j,n=A.size();
    i = lower_bound(A.begin(),A.end(),B)-A.begin();
    j = lower_bound(A.begin(),A.end(),B+1)-A.begin();
    if(A[i] == B)
        ans[0] = i;
    if(A[j-1] == B)
        ans[1] = j-1;
    return ans;
}
