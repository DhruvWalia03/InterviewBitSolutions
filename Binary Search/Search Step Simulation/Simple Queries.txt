/*
This Solution is By Dhruv Walia

Problem Description

You are given an array A having N integers.

You have to perform the following steps in a given order.

1) generate all subarrays of A.

2) take the maximum element from each subarray of A and insert it into a new array G.

3) replace every element of G with the product of their divisors mod 1e9 + 7.

4) sort G in descending order

You now need to perform Q queries

In each query, you are given an integer K, where you have to find the Kth element in G.

NOTE : Your solution will run on multiple test cases so do clear global variables after using them.

Solution is below: 
*/

long long prod[100005]={0},mod = 1e9+7;

void seive()
{
    if(prod[1] != 0)
        return;
    for(int i=1; i<100005; i++)
        prod[i] = i%mod;
    for(int i=2; i<100005; i++)
        for(int j=2*i; j<100005; j+=i)
            prod[j] = (prod[j]%mod*i%mod)%mod;
}

vector<int> Solution::solve(vector<int> &A, vector<int> &B)
{
    seive();
    int i,j,n=A.size();
    long long freq[n];
    vector<int> ans;
    stack<int> s;s.push(0);
    for(i=1;i<n;i++)
    {
        while(!s.empty() && A[s.top()]<=A[i])
        {
            int idx = s.top();
            s.pop();
            int l = idx+1;
            int r = i-idx;
            if(!s.empty())
                l = idx - s.top();
            freq[idx] = l*r;
        }
        s.push(i);
    }
    while(!s.empty())
    {
        int idx = s.top();
        s.pop();
        int l = idx+1;
        int r = i-idx;
        if(!s.empty())
            l = idx - s.top();
        freq[idx] = l*r;
    }
    vector<pair<long long,long long>> v;
    for(i=0;i<n;i++)
        v.push_back({prod[A[i]],freq[i]});
    sort(v.rbegin(),v.rend());
    for(i=1;i<n;i++)
        v[i].second = v[i-1].second+v[i].second;
    for(i=0;i<B.size();i++)
    {
        long long l=1,h=n-1,tans=0;
        if(v[0].second >= B[i]){
            ans.push_back(v[0].first);
            continue;}
        while(l<=h)
        {
            int m = (l+h)/2;
            if(v[m].second >= B[i])
                tans = max(tans,v[m].first),h = m-1;
            else l = m+1;
        }
        ans.push_back(tans);
    }
    return ans;
}