/*
This Solution is By Dhruv Walia

Asked In:
YAHOO
AMAZON
ADOBE
MICROSOFT

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) – Push element x onto stack.
pop() – Removes the element on top of the stack.
top() – Get the top element.
getMin() – Retrieve the minimum element in the stack.
Note that all the operations have to be constant time operations.

Questions to ask the interviewer :
Q: What should getMin() do on empty stack? 
A: In this case, return -1.

Q: What should pop do on empty stack? 
A: In this case, nothing. 

Q: What should top() do on empty stack?
A: In this case, return -1

Solution is below: 
*/

stack<int> s;
int min_e;
MinStack::MinStack() {
    while(!s.empty())
        s.pop();
    min_e = INT_MAX;
}

void MinStack::push(int x) {
    if(s.empty())
    {
        s.push(x);
        min_e = x;
        return;
    }
    if(x<min_e)
    {
        s.push(2*x - min_e);
        min_e = x;
    }
    else s.push(x);
}

void MinStack::pop() {
    if(s.empty())
        return ;
    int x = s.top();
    s.pop();
    if(x<min_e)
        min_e = 2*min_e - x;
}

int MinStack::top() {
    if(s.empty())
        return -1;
    return (s.top() < min_e)? min_e: s.top();
}

int MinStack::getMin() {
    if(s.empty())
        return -1;
    return min_e;
}

