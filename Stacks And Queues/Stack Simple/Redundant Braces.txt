/*
This Solution is By Dhruv Walia

Asked In:
AMAZON

Given a string A denoting an expression. It contains the following operators ’+’, ‘-‘, ‘*’, ‘/’.
Chech whether A has redundant braces or not.
Return 1 if A has redundant braces, else return 0.
Note: A will be always a valid expression.

For Example
Input 1:
    A = "((a + b))"
Output 1:
    1
Explanation 1:
    ((a + b)) has redundant braces so answer will be 1.

Input 2:
    A = "(a + (a + b))"
Output 2:
    0
Explanation 2:
    (a + (a + b)) doesn't have have any redundant braces so answer will be 0.

Solution is below: 
*/

int Solution::braces(string A) {

    int i,n = A.length(),x = -1,y = -1;
    stack<char> s;
    for(i=0;i<n;i++)
    {
        if(A[i] == ')')
        {
            char top = s.top();
            s.pop();
            bool flag = true;
            while (!s.empty() and top != '(') 
            {
                if (top == '+' || top == '-' || top == '*' || top == '/')
                    flag = false;
                top = s.top();
                s.pop();
            }
            if(flag == true) return 1;
        }
        else s.push(A[i]);
    }
    return 0;
}

/* ALTERNATIVELY

int Solution::braces(string A) {

    int i,n = A.length(),x = -1,y = -1,z = -1;
    stack<int> s;
    for(i=0;i<n;i++)
    {
        if(A[i] == '(')
            s.push(i);
        else if(A[i] == ')')
        {
            if(x == -1 && y == -1)
                x = s.top(),z = i;
            else
            {
                y = x;
                x = s.top();
                if(abs(x-y) == 1 && abs(z-i) == 1)
                    return 1;
                z = i;
            }
            if(abs(i-x) == 2)
                return 1;
            s.pop();
        }
    }
    return 0;
}

*/