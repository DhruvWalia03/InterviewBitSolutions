/*
This Solution is By Dhruv Walia

Problem Description

You are given an array A containing N integers. The special product of each ith integer in this array is defined as the product of the following:

LeftSpecialValue: For an index i, it is defined as the index j such that A[j]>A[i] and (i>j). If multiple A[j]'s are present in multiple positions, the LeftSpecialValue is the maximum value of j.
RightSpecialValue: For an index i, it is defined as the index j such that A[j]>A[i] and (j>i). If multiple A[j]'s are present in multiple positions, the RightSpecialValue is the minimum value of j.
Write a program to find the maximum special product of any integer in the array.

NOTE:  As the answer can be large, output your answer modulo 109 + 7.

Input 1:
 A = [1, 4, 3, 4]
Input 2:
 A = [10, 7, 100]

Output 1:
 3
Output 2:
 0

Explanation 1:
 For A[2] = 3, LeftSpecialValue is 1 and RightSpecialValue is 3.
 So, the ans is 1*3 = 3.
 
Explanation 2:
 There is not any integer having maximum special product > 0. So, the ans is 0.

Solution is below: 
*/


int Solution::maxSpecialProduct(vector<int> &A) {

    int i,n = A.size(), mod = 1e9+7;
    long long max_left[n] = {0},min_right[n] = {0},ans = 0;
    stack<pair<int,int>> st;
    for(int i=0;i<n;i++)
    {
        while(!st.empty() && st.top().first <= A[i])
            st.pop();
        if(st.empty())
            max_left[i] = 0;
        else
            max_left[i] = st.top().second;
        st.push({A[i],i});
    }
    while(!st.empty())
        st.pop();
    for(int i=n-1;i>=0;i--)
    {
        while(!st.empty() && st.top().first <= A[i])
            st.pop();
        if(st.empty())
            min_right[i]=0;
        else
            min_right[i]=st.top().second;
        st.push({A[i],i});
    }
    for(i=1;i<n-1;i++)
    {
        ans = max(ans,max_left[i] * min_right[i]);
    }
    return (ans%mod);
}