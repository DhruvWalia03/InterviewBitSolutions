/*
This Solution is By Dhruv Walia

Asked In:
AMAZON

The set [1,2,3,â€¦,n] contains a total of n! unique permutations.
By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3 ) :

1. "123"
2. "132"
3. "213"
4. "231"
5. "312"
6. "321"
Given n and k, return the kth permutation sequence.

For example, given n = 3, k = 4, ans = "231"

Good questions to ask the interviewer :
 What if n is greater than 10. How should multiple digit numbers be represented in string?
  In this case, just concatenate the number to the answer. so if n = 11, k = 1, ans = "1234567891011"

Whats the maximum value of n and k?
 In this case, k will be a positive integer thats less than INT_MAX. n is reasonable enough to make sure the answer does not bloat up a lot.

Solution is below: 
*/

int fact(int n)
{
    if (n>12)   
        return INT_MAX;
    int f = 1;
    for (auto i = 2; i<=n; ++i)
        f *= i;
    return f;
}
string backtracking(int k, vector<int>& numlist)
{
    auto n = numlist.size();
    if (n==0 || k > fact(n))
        return "";
    int f = fact(n-1);
    int pos = k / f;
    k %= f;
    string ch = to_string(numlist[pos]);
    numlist.erase(numlist.begin() + pos);
    return ch + backtracking(k, numlist);
}
string Solution::getPermutation(int n, int k) {
    vector<int> numlist;
    
    for (auto i = 1; i<n+1; ++i)
        numlist.emplace_back(i);
    return backtracking(k-1, numlist);
}

/* ALTERNATIVELY
vector<vector<int> > ans;
void solve(vector<int> a,int idx,int n)
{
    if (idx == n) {
        ans.push_back(a);
        return;
    }
    for (int i = idx; i < n; i++)
    {
        swap(a[idx], a[i]);
        solve(a, idx+1, n);
        swap(a[idx], a[i]);
    }
}

string value(int A)
{
    string s = "";
    while(A > 0)
    {
        s += (A%10 + '0');
        A /= 10;
    }
    reverse(s.begin(),s.end());
    return s;
}

string Solution::getPermutation(int A, int B) {
    
    ans.clear();
    int i,j;
    vector<int> a;
    string s = "";
    for(i=1;i<=A;i++)
        a.push_back(i);
    if(B != 1)
    {
        solve(a,0,A);
        sort(ans.begin(),ans.end());
        for(i=0;i<ans[B-1].size();i++)
            s += value(ans[B-1][i]);
    }
    else
    {
        for(i=0;i<a.size();i++)
            s += value(a[i]);
    }
    return s;
}

*/