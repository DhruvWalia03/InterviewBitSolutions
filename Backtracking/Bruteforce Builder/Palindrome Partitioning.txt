/*
This Solution is By Dhruv Walia

Asked In:
AMAZON
GOOGLE

Given a string s, partition s such that every string of the partition is a palindrome.
Return all possible palindrome partitioning of s.
For example, given s = "aab",

Return
  [
    ["a","a","b"]
    ["aa","b"],
  ]

Ordering the results in the answer :
 Entry i will come before Entry j if :

 len(Entryi[0]) < len(Entryj[0]) OR
 (len(Entryi[0]) == len(Entryj[0]) AND len(Entryi[1]) < len(Entryj[1])) OR
 *
 *
 *
 (len(Entryi[0]) == len(Entryj[0]) AND â€¦ len(Entryi[k] < len(Entryj[k]))
In the given example,
   ["a", "a", "b"] comes before ["aa", "b"] because len("a") < len("aa")

Solution is below: 
*/

bool isPalindrome(string& s)
{
    int i=0,j=s.size()-1;
    while(i<j)
    {
        if(s[i] != s[j])
            return false;
            i++;j--;
    }
    return true;
}

void partitions(string s, vector<vector<string> >&res, vector<string>& current)
{
    if(s.empty()) {
        res.push_back(current);
        return;
    }    
    for(int i=0;i<s.size();i++)
    {
        string substring = s.substr(0,i+1);
        if(isPalindrome(substring))
        {
            current.push_back(substring);
            partitions(s.substr(i+1),res,current);
            current.pop_back();
        }
    }
}
    
vector<vector<string> > Solution::partition(string s) {
        
        vector<vector<string> >res;
        vector<string> current;
        partitions(s,res,current);
        set<vector<string> >visited;        
        for(int i=0;i<res.size();i++)
            visited.insert(res[i]);
        return {visited.begin(),visited.end()};
}