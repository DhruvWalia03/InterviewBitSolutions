/*
This Solution is By Dhruv Walia

Asked In:
FACEBOOK
EPIC SYSTEMS

Given a digit string, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below.
The digit 0 maps to 0 itself.
The digit 1 maps to 1 itself.

Input: Digit string "23"

Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Make sure the returned strings are lexicographically sorted.

Solution is below: 
*/

vector<char> g[10];
vector<string> ans;
void graph()
{
    g[0].push_back('0');
    g[1].push_back('1');
    g[2].push_back('a');g[2].push_back('b');g[2].push_back('c');
    g[3].push_back('d');g[3].push_back('e');g[3].push_back('f');
    g[4].push_back('g');g[4].push_back('h');g[4].push_back('i');
    g[5].push_back('j');g[5].push_back('k');g[5].push_back('l');
    g[6].push_back('m');g[6].push_back('n');g[6].push_back('o');
    g[7].push_back('p');g[7].push_back('q');g[7].push_back('r');g[7].push_back('s');
    g[8].push_back('t');g[8].push_back('u');g[8].push_back('v');
    g[9].push_back('w');g[9].push_back('x');g[9].push_back('y');g[9].push_back('z');
}

void solve(string A,int i,int n,string s)
{
    if(i == n)
    {
        ans.push_back(s);
        return;
    }
    int x = A[i] - '0';
    for(auto j : g[x])
        solve(A,i+1,n,s+j);
}

vector<string> Solution::letterCombinations(string A) {

    ans.clear();
    for(int i = 0; i < 10; i++)
        g[i].clear();
    graph();
    int n = A.length();
    solve(A,0,n,"");
    sort(ans.begin(),ans.end());
    return ans;
}