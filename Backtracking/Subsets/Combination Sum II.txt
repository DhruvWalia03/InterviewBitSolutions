/*
This Solution is By Dhruv Walia

Asked In:
MICROSOFT
AMAZON
INFOSYS

Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.

Note:
 All numbers (including target) will be positive integers.
 Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
 The solution set must not contain duplicate combinations.

Example :
 Given candidate set 10,1,2,7,6,1,5 and target 8,

A solution set is:
 [1, 7]
 [1, 2, 5]
 [2, 6]
 [1, 1, 6]

Solution is below: 
*/

map<vector<int>,int> mp;
void backtracking(int start, vector<int>& row, int sum, vector<vector<int> >& res, vector<int>& A, int B)
{
    if (sum >= B)
    {
        if (sum==B && mp[row] == 0)
            res.emplace_back(row),mp[row] = 1;
        return;
    }

    if (start == A.size())
        return;

    row.emplace_back(A[start]);
    sum += A[start];
    backtracking(start+1, row, sum, res, A, B);
    sum -= row[row.size()-1];
    row.pop_back();
    backtracking(start+1, row, sum, res, A, B);
}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    
    mp.clear();
    vector<vector<int> > res;
    vector<int> row;
    sort(A.begin(), A.end());
    backtracking(0, row, 0, res, A, B);
    return res;
}