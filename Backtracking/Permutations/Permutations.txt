/*
This Solution is By Dhruv Walia

Asked In:
MICROSOFT
ADOBE
GOOGLE

Given a collection of numbers, return all possible permutations.
Example:
[1,2,3] will have the following permutations:

[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]

NOTE
 No two entries in the permutation sequence should be the same.
 For the purpose of this problem, assume that all the numbers in the collection are unique.
 Warning : DO NOT USE LIBRARY FUNCTION FOR GENERATING PERMUTATIONS.
 If you do, we will disqualify your submission retroactively and give you penalty points.

Solution is below: 
*/

vector<vector<int> > ans;
void solve(vector<int> a,int idx,int n)
{
    if (idx == n) {
        ans.push_back(a);
        return;
    }
    for (int i = idx; i < n; i++)
    {
        swap(a[idx], a[i]);
        solve(a, idx+1, n);
        swap(a[idx], a[i]);
    }
}

vector<vector<int> > Solution::permute(vector<int> &A) {
    
    ans.clear();
    int i,n = A.size(),j;
    sort(A.begin(),A.end());
    solve(A,0,n);
    sort(ans.begin(),ans.end());
    return ans;

}