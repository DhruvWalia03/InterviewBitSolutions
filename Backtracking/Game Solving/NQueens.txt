/*
This Solution is By Dhruv Walia

Asked In:
QUALCOMM
GOOGLE
AMAZON

The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens’ placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example, There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

Solution is below: 
*/

vector<vector<string>> ans;
int board[11][11],dia1[11],dia2[11];
bool check(int r,int c,int n)
{
    for(int i=0;i<n;i++)
        if(board[r][i]==1)
            return false;
    for(int i=r, j=c; i>=0 && j>=0; i--, j--)
        if(board[i][j] == 1)
            return false;
    for(int i=r,j=c; i<n && j>=0; i++, j--)
        if(board[i][j] == 1)
            return false;
    board[r][c]=1;
    return true;
}
    
void solve(int c,int n)
{
    if(c == n)
    {
        vector<string> v;
        string s = "";
        for(int i=0;i<n;i++)
        {
            s = "";
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==1)
                    s += "Q";
                    else s += ".";
            }
            v.push_back(s);
        }
        ans.push_back(v);
        return ;
    }
    for(int i=0;i<n;i++)
    {
        if(check(i,c,n))
        {
            solve(c+1,n);
            board[i][c] = 0;
        }
    }
    return ;
}
    

vector<vector<string> > Solution::solveNQueens(int A) {
        ans.clear();
        memset(board,0,sizeof(board));
        memset(dia1,0,sizeof(dia1));
        memset(dia2,0,sizeof(dia2));
        solve(0,A);
        sort(ans.begin(),ans.end());
        return ans;
}