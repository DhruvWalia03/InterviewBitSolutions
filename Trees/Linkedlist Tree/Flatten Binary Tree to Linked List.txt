/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/*
This Solution is By Dhruv Walia

Asked In:
ADOBE
AMAZON
MICROSOFT

Given a binary tree, flatten it to a linked list in-place.
Example :

Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:

   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
Note that the left child of all nodes should be NULL.

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<TreeNode*> ans;
void preOrder(TreeNode* root)
{
    if(root == NULL)
        return;
    ans.push_back(root);
    preOrder(root->left);
    preOrder(root->right);
    return;
}

TreeNode* Solution::flatten(TreeNode* A) {
    ans.clear();
    preOrder(A);
    for(int i = 1; i < ans.size(); i++)
    {
        ans[i-1]->left = NULL;
        ans[i-1]->right = ans[i];
    }
    ans[ans.size()-1]->left = NULL;
    ans[ans.size()-1]->right = NULL;
    return ans[0];
}