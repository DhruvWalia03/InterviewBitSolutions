/*
This Solution is By Dhruv Walia

Asked In:
AMAZON
Problem Description

Given an undirected tree with an even number of nodes. Consider each connection between a parent and child node to be an edge.
You need to remove maximum number of these edges, such that the disconnected subtrees that remain each have an even number of nodes.
Return the maximum number of edges you can remove.

Input 1:
 A = 6
 B = [
       [1, 2]
       [1, 3]
       [1, 4]
       [3, 5]
       [4, 6]
     ]
Input 2:
 A = 2
 B = [
       [1, 2]
     ]

Output 1:
 2
Output 2:
 0

Explanation 1:
      1
    / | \
   2  3  4
      |   \
      5    6
 Maximum number of edges we can remove is 2, i.e (1, 3) and (1, 4)
Explanation 2:
 We can't remove any edges.

Solution is below: 
*/

vector<int> g[100001];
int vis[100001],res;
int dfs(int v)
{
    int tree_count = 0;
    for(int child: g[v])
    {
        if(vis[child] == 0)
        {
            vis[child] = 1;
            int subtree_count = dfs(child);
            if(subtree_count%2==0) 
                res++;
            else 
                tree_count += subtree_count;
        }
    }
    return tree_count+1;
}

void init()
{
    for(int i=0; i<= 100001; i++)
    {
        g[i].clear();
        vis[i]=0;
    }
    res = 0;
}

int Solution::solve(int A, vector<vector<int> > &B) {
    init();
    for(int i=0; i<B.size(); i++)
    {
        g[B[i][0]].push_back(B[i][1]);
        g[B[i][1]].push_back(B[i][0]);
    }
    vis[1] = 1; 
    dfs(1);
    return res;
}