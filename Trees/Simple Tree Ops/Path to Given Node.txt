/*
This Solution is By Dhruv Walia

Asked In:
AMAZON

Problem Description

Given a Binary Tree A containing N nodes.
You need to find the path from Root to a given node B.

NOTE:
  No two nodes in the tree have same data values.
  You can assume that B is present in the tree A and a path always exists.

Input 1:

 A =

           1
         /   \
        2     3
       / \   / \
      4   5 6   7 

B = 5

Output 1:
 [1, 2, 5]

Explanation 1:
 We need to find the path from root node to node with data value 5.
 So the path is 1 -> 2 -> 5 so we will return [1, 2, 5]

Solution is below: 
*/


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

vector<int> ans;
bool traverse(TreeNode *A,int B)
{
    if(A == NULL)
        return false;
    if(A->val == B)
    {
        ans.push_back(A->val);
        return true;
    }
    if(traverse(A->left,B))
    {
        ans.push_back(A->val);
        return true;
    }
    else if(traverse(A->right,B))
    {
        ans.push_back(A->val);
        return true;
    }
    return false;
}

vector<int> Solution::solve(TreeNode* A, int B) {
    ans.clear();
    traverse(A,B);
    reverse(ans.begin(),ans.end());
    return ans;
}