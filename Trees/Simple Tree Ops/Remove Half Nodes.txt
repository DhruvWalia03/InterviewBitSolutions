/*
This Solution is By Dhruv Walia

Asked In:
AMAZON

Problem Description
Given a binary tree A with N nodes.
You have to remove all the half nodes and return the final binary tree.

NOTE:
  Half nodes are nodes which have only one child.
  Leaves should not be touched as they have both children as NULL.

Input 1:

           1
         /   \
        2     3
       / 
      4

Output 1:

           1
         /   \
        4     3

Explanation 1:
 The only half node present in the tree is 2 so we will remove this node.

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode* Solution::solve(TreeNode* A) {
    
    TreeNode *curr = A, *head = new TreeNode(0);
    head->left = curr;
    queue<pair<TreeNode*,TreeNode*>> q;
    q.push({head,curr});
    while(!q.empty())
    {
        TreeNode *prev = q.front().first;
        curr = q.front().second;
        q.pop();
        if(curr->left == NULL && curr->right == NULL)
            continue;
        if(curr->left == NULL && curr->right != NULL)
        {
            if(prev->left == curr)
                prev->left = curr->right;
            if(prev->right == curr)
                prev->right = curr->right;
            q.push({prev,curr->right});
        }
        else if(curr->left != NULL && curr->right == NULL)
        {
            if(prev->left == curr)
                prev->left = curr->left;
            if(prev->right == curr)
                prev->right = curr->left;
            q.push({prev,curr->left});
        }
        else
        {
            q.push({curr,curr->left});
            q.push({curr,curr->right});
        }
    }
    return head->left;
}