/*
This Solution is By Dhruv Walia

Asked In:
AMAZON

Given a binary search tree T, where each node contains a positive integer, and an integer K, you have to find whether or not there exist two different nodes A and B such that A.value + B.value = K.
Return 1 to denote that two such nodes exist. Return 0, otherwise.

Notes
  Your solution should run in linear time and not take memory more than O(height of T).
  Assume all values in BST are distinct.

Input 1: 

T :       10
         / \
        9   20

K = 19
Return: 1

Input 2: 

T:        10
         / \
        9   20

K = 40
Return: 0

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
map<int,int> mp;
vector<int> v;
void inorder(TreeNode *A)
{
    if(A == NULL)
        return;
    inorder(A->left);
    v.push_back(A->val);
    mp[A->val]++;
    inorder(A->right);
}

int Solution::t2Sum(TreeNode* A, int B) {
    mp.clear();
    v.clear();
    inorder(A);
    for(int i = 0; i < v.size(); i++)
    {
        if(B == 2*v[i] && mp[v[i]] > 1)
            return 1;
        else if(B != 2*v[i] && mp[B-v[i]] == 1)
            return 1;
    }
    return 0;
}