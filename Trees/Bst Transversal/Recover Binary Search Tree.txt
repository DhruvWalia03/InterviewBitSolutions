/*
This Solution is By Dhruv Walia

Asked In:
MICROSOFT
AMAZON

Two elements of a binary search tree (BST) are swapped by mistake.
Tell us the 2 values swapping which the tree will be restored.

Note:
  A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?

Input : 
         1
        / \
       2   3

Output : 
       [1, 2]

Explanation : Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
which is a valid BST          

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> ans,v;
void inorder(TreeNode *A,int& prev)
{
    if(A == NULL)
        return;
    inorder(A->left,prev);
    if(prev != INT_MIN && prev > A->val)
    {
        ans.push_back(prev);
        ans.push_back(A->val);
    }
    prev=A->val;
    inorder(A->right,prev);
}

vector<int> Solution::recoverTree(TreeNode* A) {
    ans.clear();
    v.clear();
    int prev = INT_MIN;
    inorder(A,prev);
    sort(ans.begin(),ans.end());
    v.push_back(ans[0]);
    v.push_back(ans[ans.size()-1]);
    return v;
}