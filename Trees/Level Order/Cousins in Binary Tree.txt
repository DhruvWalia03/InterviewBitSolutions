/*
This Solution is By Dhruv Walia

Asked In:
AMAZON
DE SHAW

Problem Description

Given a Binary Tree A consisting of N nodes.
You need to find all the cousins of node B.
NOTE:
	Siblings should not be considered as cousins.
	Try to do it in single traversal.
	You can assume that Node B is there in the tree A.
	Order doesn't matter in the output.

Input 1:
 A =
           1
         /   \
        2     3
       / \   / \
      4   5 6   7 
B = 5

Output 1:
 [6, 7]

Explanation 1:
 Cousins of Node 5 are Node 6 and 7 so we will return [6, 7]
 Remember Node 4 is sibling of Node 5 and do not need to return this.

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::solve(TreeNode* A, int B) {

    vector<int> ans;
    map<int,vector<int>> mp;
    int height, sibling = -1,i;
    if(A->val == B)
        return ans;
    queue<pair<TreeNode*,int> > q;
    q.push({A,1});
    while(!q.empty())
    {
        TreeNode *curr = q.front().first;
        int x = q.front().second;
        q.pop();
        if(curr->val == B)
            height = x;
        mp[x].push_back(curr->val);
        if(curr -> left != NULL)
        {
            if(curr->left->val == B && curr->right != NULL)
                sibling = curr->right->val;
            else if(curr->left->val == B)
                sibling = -1;
            q.push({curr->left,x+1});
        }
        if(curr -> right != NULL)
        {
            if(curr->right->val == B && curr->left != NULL)
                sibling = curr->left->val;
            else if(curr->right->val == B)
                sibling = -1;
            q.push({curr->right,x+1});
        }
    }
    for(i = 0; i < mp[height].size(); i++)
    {
        if(mp[height][i] == B)
            mp[height].erase(mp[height].begin()+i);
    }
    if(sibling == -1)
        return mp[height];
    for(i = 0; i < mp[height].size(); i++)
    {
        if(mp[height][i] == sibling)
            mp[height].erase(mp[height].begin()+i);
    }
    return mp[height];
}