/*
This Solution is By Dhruv Walia

Asked In:
DE SHAW

Problem Description
Given a binary tree, return the reverse level order traversal of its nodes values. (i.e, from left to right and from last level to starting level).

Input 1:
    3
   / \
  9  20
    /  \
   15   7

Output 1:
 [15, 7, 9, 20, 3] 

Explanation 1:
 Nodes as level 3 : [15, 7]
 Nodes at level 2: [9, 20]
 Nodes at level 1: [3]
 Reverse level order traversal will be: [15, 7, 9, 20, 3]

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::solve(TreeNode* A) {

    vector<int> ans;
    if(A == NULL)
        return ans;
    queue<pair<TreeNode*,int> > q;
    q.push({A,1});
    while(!q.empty())
    {
        TreeNode *curr = q.front().first;
        int x = q.front().second;
        q.pop();
        ans.push_back(curr->val);
        if(curr -> right != NULL)
            q.push({curr->right,x+1});
        if(curr -> left != NULL)
            q.push({curr->left,x+1});
    }
    reverse(ans.begin(),ans.end());
    return ans;
}