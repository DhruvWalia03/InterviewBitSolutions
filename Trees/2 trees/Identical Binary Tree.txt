/*
This Solution is By Dhruv Walia

Asked In:
AMAZON

Given two binary trees, write a function to check if they are equal or not.
Two binary trees are considered equal if they are structurally identical and the nodes have the same value.
Return 0 / 1 ( 0 for false, 1 for true ) for this problem

Example :
Input : 

   1       1
  / \     / \
 2   3   2   3

Output : 
  1 or True

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int Solution::isSameTree(TreeNode* A, TreeNode* B) {

    if(A == NULL && B == NULL)
        return 1;
    if(A == NULL || B == NULL)
        return 0;
    queue <pair<TreeNode*,TreeNode*>> q;
    q.push({A,B});
    while(!q.empty())
    {
        TreeNode *a = q.front().first;
        TreeNode *b = q.front().second;
        q.pop();
        if(a->val != b->val)
            return 0;
        if(a->left != NULL && b->left != NULL)
            q.push({a->left,b->left});
        else if(a->left != NULL || b->left != NULL)
            return 0;
        if(a->right != NULL && b->right != NULL)
            q.push({a->right,b->right});
        else if(a->right != NULL || b->right != NULL)
            return 0;
    }
    return 1;
}