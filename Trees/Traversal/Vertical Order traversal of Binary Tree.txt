/*
This Solution is By Dhruv Walia

Asked In:
AMAZON
GRAB
INFOWORKS
MICROSOFT

Problem Description
Given a binary tree A consisting of N nodes, return a 2-D array denoting the vertical order traversal of A.
Go through the example and image for more details.

NOTE:
 If 2 or more Tree Nodes shares the same vertical level then the one with earlier occurence in the pre-order traversal of tree comes first in the output.
 Row 1 of the output array will be the nodes on leftmost vertical line similarly last row of the output array will be the nodes on the rightmost vertical line.

Input 1:

      6
    /   \
   3     7
  / \     \
 2   5     9

Output 1:
 [
    [2],
    [3],
    [6, 5],
    [7],
    [9]
 ]

Explanation 1:

 
 Nodes on Vertical Line 1: 2
 Nodes on Vertical Line 2: 3
 Nodes on Vertical Line 3: 6, 5
    As 6 and 5 are on the same vertical level but as 6 comes first in the pre-order traversal of the tree so we will output 6 before 5.
 Nodes on Vertical Line 4: 7
 Nodes on Vertical Line 5: 9

Solution is below: 
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<vector<int> > Solution::verticalOrderTraversal(TreeNode* A) {

    vector<vector<int>> ans;
    if(A == NULL)
        return ans;
    map<int,vector<int>> mp;
    mp[0].push_back(A->val);
    queue<pair<int,TreeNode*>> q;
    q.push({0,A});
    while(!q.empty())
    {
        TreeNode *curr = q.front().second;
        int dis = q.front().first;
        q.pop();
        if(curr->left != NULL)
        {
            mp[dis-1].push_back(curr->left->val);
            q.push({dis-1,curr->left});
        }
        if(curr->right != NULL)
        {
            mp[dis+1].push_back(curr->right->val);
            q.push({dis+1,curr->right});
        }
    }
    for(auto f: mp)
        ans.push_back(f.second);
    return ans;
}