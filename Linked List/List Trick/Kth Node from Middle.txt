/*
This Solution is By Dhruv Walia

Asked In:
AMAZON
Problem Description

Given a linked list A of length N and an integer B.

You need to find the value of the Bth node from the middle towards the beginning of the Linked List A.
If no such element exists, then return -1.

NOTE:
Position of middle node is: (N/2)+1, where N is the total number of nodes in the list.

Input 1:
 A = 3 -> 4 -> 7 -> 5 -> 6 -> 1 6 -> 15 -> 61 -> 16
 B = 3

Output 1:
 4

Explanation 1:
 The Middle of the linked list is the node with value 6.
 The 1st node from the middle of the linked list is the node with value 5.
 The 2nd node from the middle of the linked list is the node with value 7.
 The 3rd node from the middle of the linked list is the node with value 4.
 So we will output 4.

Explanation 2:

Solution is below: 
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
int Solution::solve(ListNode* A, int B) 
{
int n = 0;
ListNode *temp = A;
while(temp)
{
n++;
temp = temp->next;
}

int required_node = (n / 2) + 1 - B;

if(required_node <= 0)
return -1;

temp = A;
n = 0;
while(temp)
{
n++;
if(n == required_node)
return temp->val;
temp = temp->next;
}
}