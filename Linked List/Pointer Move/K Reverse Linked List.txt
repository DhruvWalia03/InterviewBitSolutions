/*
This Solution is By Dhruv Walia

Asked In:
MICROSOFT
AMAZON

Given a singly linked list and an integer K, reverses the nodes of the list K at a time and returns modified linked list.
NOTE : The length of the list is divisible by K

Example :
Given linked list 1 -> 2 -> 3 -> 4 -> 5 -> 6 and K=2,
You should return 2 -> 1 -> 4 -> 3 -> 6 -> 5
Try to solve the problem using constant extra space.

Solution is below: 
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* reverse(ListNode* A,int k) {

    ListNode *curr = A;
    if(curr == NULL || curr->next == NULL)
        return A;
    ListNode *prev = NULL, *nex = A->next;
    int x = 0;
    while(curr != NULL && x<k)
    {
        curr -> next = prev;
        prev = curr;
        curr = nex;
        x++;
        if(nex != NULL)
            nex = nex->next;
    }
    return prev;
}

ListNode* Solution::reverseList(ListNode* A, int k) 
{
    if(A == NULL || A->next == NULL || k == 1)
        return A;
    ListNode *curr = A, *nex = A->next;
    int x = 0;
    ListNode *temp = NULL, *head = NULL, *ctemp = NULL;
    while(nex != NULL)
    {
        if(x == k-1)
        {
            x = -1;
            ListNode *rev = reverse(ctemp,k);
            if(temp == NULL)
            {
                temp = A;
                head = rev;
            }
            else
            {
                temp -> next = rev;
                temp = ctemp;
            }
        }
        if(x == 0)
            ctemp = curr;
        x++;
        curr = nex;
        nex = nex->next;
    }
    ListNode *rev = reverse(ctemp,k);
    if(temp == NULL)
    {
        temp = A;
        head = rev;
    }
    else
    {
        temp -> next = rev;
        temp = ctemp;
    }
    return head;
}