/*
This Solution is By Dhruv Walia

Asked in:  
Microsoft
Google

Sort a linked list using insertion sort.
We have explained Insertion Sort at Slide 7 of Arrays
Insertion Sort Wiki has some details on Insertion Sort as well.

Example :

Input : 1 -> 3 -> 2

Return 1 -> 2 -> 3

Solution is below: 
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * 
 * @Output head pointer of list.
 */
listnode* insertionSortList(listnode* A) {

    if(A == NULL || A->next == NULL)
        return A;
    
    listnode *ans = NULL,*curr = A;
    while(curr != NULL)
    {
        listnode* scnd = curr;
        curr = curr->next;
        if(ans == NULL || ans->val >= scnd->val)
        {
            scnd->next = ans;
            ans = scnd;
        }
        else
        {
            listnode* temp = ans;
            while (temp != NULL)
            {
                listnode* s = temp;
                temp = temp->next;
                if (s->next == NULL || s->next->val > scnd->val)
                {
                    scnd->next = s->next;
                    s->next = scnd;
                    break;
                }
            }
        }
    }
    return ans;
}
