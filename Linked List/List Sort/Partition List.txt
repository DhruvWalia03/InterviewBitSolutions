/*
This Solution is By Dhruv Walia

Asked in:  
Microsoft

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

Solution is below: 
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * @input B : Integer
 * 
 * @Output head pointer of list.
 */
listnode* partition(listnode* A, int B) {

    listnode *ans = NULL, *cans = NULL, *curr = A;
    while(curr != NULL)
    {
        if(curr-> val < B)
        {
            listnode *newNode = listnode_new(curr-> val);
            if(ans == NULL)
                ans = newNode, cans = newNode;
            else cans->next = newNode, cans = newNode;
        }
        curr = curr->next;
    }
    curr = A;
    while(curr != NULL)
    {
        if(curr-> val >= B)
        {
            listnode *newNode = listnode_new(curr-> val);
            if(ans == NULL)
                ans = newNode, cans = newNode;
            else cans->next = newNode, cans = newNode;
        }
        curr = curr->next;
    }
    return ans;
}
