/*
This Solution is By Dhruv Walia

Asked In:
AMAZON
MICROSOFT
GOLDMAN SACHS

Given an array of strings, return all groups of strings that are anagrams. Represent a group by a list of integers representing the index in the original list. Look at the sample case for clarification.
Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp'
Note:  All inputs will be in lower-case.

Example :

Input : cat dog god tca
Output : [[1, 4], [2, 3]]

cat and tca are anagrams which correspond to index 1 and 4. 
dog and god are another set of anagrams which correspond to index 2 and 3.

The indices are 1 based ( the first element has index 1 instead of index 0).

Ordering of the result : You should not change the relative ordering of the words / phrases within the group. Within a group containing A[i] and A[j], A[i] comes before A[j] if i < j.

Solution is below: 
*/

vector<vector<int> > Solution::anagrams(const vector<string> &a) {

    vector<vector<int> > ans;
    vector<string> s;
    int i,j,x,n=a.size();
    for(i=0;i<n;i++)
    {
        s.push_back(a[i]);
        sort(s[i].begin(),s[i].end());
    }
    map<string,int> mp;
    mp[s[0]]=1;
    ans.push_back(vector<int>());
    ans[0].push_back(1);
    x=1;
    for(i=1;i<n;i++)
    {
        if(mp[s[i]]==0)
        {
            mp[s[i]]=x+1;
            ans.push_back(vector<int>());
            ans[x].push_back(i+1);
            x++;
        }
        else
            ans[mp[s[i]]-1].push_back(i+1);
    }
    return ans;
}